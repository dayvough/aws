upstream {{ instance_name }} {
  server unix:///home/{{ ansible_user }}/{{ instance_name }}/shared/pids/unicorn.sock;
}

server {
  listen 80;

  server_name example.com;

  root /home/{{ ansible_user }}/{{ instance_name }}/current/public;

  access_log /var/log/nginx/nginx.access.log;
  error_log /var/log/nginx/nginx.error.log info;

  location ~ ^/(assets)/ {
    root /home/{{ ansible_user }}/{{ instance_name }}/current/public;
    expires max;
    add_header Cache-Control public;

    if ($request_filename ~* ^.*?\.(eot)|(ttf)|(woff)|(svg)|(otf)$){
      add_header Access-Control-Allow-Origin *;
    }
  }

  location ~ ^/(fonts)/ {
    root /home/{{ ansible_user }}/{{ instance_name }}/current/public;
    expires max;
    add_header Cache-Control public;

    if ($request_filename ~* ^.*?\.(eot)|(ttf)|(woff)|(svg)|(otf)$){
      add_header Access-Control-Allow-Origin *;
    }
  }

  location / {
    proxy_pass http://{{ instance_name }};
    proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      if (-f $request_filename) { break; }
      if (-f $request_filename/index.html) { rewrite (.*) $1/index.html break; }
      if (-f $request_filename.html) { rewrite (.*) $1.html break; }
  }
 
  # Now this supposedly should work as it gets the filenames
  # with querystrings that Rails provides.
  # BUT there's a chance it could break the ajax calls.
  location ~* \.(ico|css|gif|jpe?g|png)(\?[0-9]+)?$ { expires max; break; }
 
  location ~ ^/javascripts/.*\.js(\?[0-9]+)?$ { expires max; break; }
 
  # Error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /home/{{ ansible_user }}/{{ instance_name }}/current/public;
  }
}